package ubu.inf.ssh.logica;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;

import ubu.inf.accesodatos.FachadaComandos;
import ubu.inf.ssh.R;
import ubu.inf.ssh.R.drawable;
import ubu.inf.ssh.R.id;
import ubu.inf.ssh.R.layout;
import ubu.inf.ssh.R.menu;
import ubu.inf.ssh.R.string;
import ubu.inf.ssh.modelo.SingletonConexion;

import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.ChannelShell;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

public class Consola  extends Activity{
	
	private EditText comando;
	private EditText result;
	private ImageButton run;
	private Session session;
	private JSch jsch;
	private ChannelExec channelExec;
	private InputStream in;
	private ArrayList<String> comandos;
	private EditText nombre;
	private TextView comandoguardar;
	
	private String auxnombre;
	
	public static final int REQUEST_TEXT3 = 3;
	private static final int DIALOG_TEXT_ENTRY = 7;
	private static final int REQUEST_TEXT4 = 0;
	
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.consola);
		inicializa();
		
	}
	
	public void inicializa(){
		comando = (EditText) findViewById(R.id.et_consola_comando);
		result = (EditText) findViewById(R.id.et_consola_resultado);
		result.setKeyListener(null);
		run = (ImageButton) findViewById(R.id.ib_consola_run);
		comandos = new ArrayList<String>();
		session= SingletonConexion.getConexion().getSesion();
		jsch = SingletonConexion.getConexion().getJsch();
		run.setOnClickListener(new listenerComando());
		
		nombre = (EditText) findViewById(R.id.et_seleccion_nombre);
		comandoguardar = (TextView) findViewById(R.id.tv_seleccion_comando);
	}
	
	protected Dialog onCreateDialog(int id){
		switch (id) {
        case DIALOG_TEXT_ENTRY:
        	LayoutInflater factory = LayoutInflater.from(this);
        	final View selectorNombre = factory.inflate(R.layout.seleccionnombre, null);
        	
        	comandoguardar = (TextView) selectorNombre.findViewById(R.id.tv_seleccion_comando);
        	comandoguardar.setText(comandos.get(comandos.size()-1));
        	comandoguardar.setTextColor(Color.RED);
        	
        	return new AlertDialog.Builder(Consola.this)
        	.setIcon(R.drawable.ic_menu_add)
        	.setTitle(R.string.nombre)
        	.setView(selectorNombre)
        	.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
				
				public void onClick(DialogInterface dialog, int wichButton) {
					Log.i("mssh", "boton ok");
					
					//se ha pulsado OK
					try{
						String cmd = comandos.get(comandos.size()-1);
						ArrayList<String> array = new ArrayList<String>();
						array.add(cmd);
						
						nombre = (EditText) selectorNombre.findViewById(R.id.et_seleccion_nombre);
						auxnombre = nombre.getText().toString();	
						Log.i("mssh", "texo="+auxnombre );
						FachadaComandos.getInstance(Consola.this).insertComandos(auxnombre, 1, array);
						
					}catch(Exception e){
						e.printStackTrace();
						Log.e("mssh", "error listener dialog OK");
					}
					
				}
			})
			.setNegativeButton(R.string.cancelar, new DialogInterface.OnClickListener() {
				
				public void onClick(DialogInterface dialog, int wichButton) {
					auxnombre=null;
					
				}
			})
			.create();
        	
		}
		return null;
	}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
	    
	    MenuInflater inflater = getMenuInflater();
	    inflater.inflate(R.menu.menucomandos, menu);
	    return true;
	}
	@Override
	   public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
                case R.id.anadirVarios: 
                        añadirVarios();
                        return true;
                case R.id.reconectar:
                        reconectar();
                        return true;
                case R.id.anadirUltimo:
                        añadirUltimo();
                        return true;
                case R.id.borrar:
                        borrar();
                        return true;
                case R.id.ejecutarFavorito:
                        ejecutarFavorito();
                        return true;
                case R.id.cerrar:
                	
                	session.disconnect(); 
                	SingletonConexion.getConexion().setJsch(null);
                	SingletonConexion.getConexion().setSesion(null);
                        finish();
                        return true;
                default:
                        return false;
        }
}
	private void ejecutarFavorito() {
		Intent i = new Intent(this, ComandosFavoritos.class);
		Consola.this.startActivityForResult(i, REQUEST_TEXT3);
		//startActivity(i);
	}
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == REQUEST_TEXT3) {
			if (resultCode == Activity.RESULT_OK) {
				Bundle bundle = data.getExtras();
				ArrayList<String> respuesta = bundle.getStringArrayList("comandos");
				
				//aqui tendría que hacer el bucle para ejecutar los comandos uno a uno
				for(int i =0;i<respuesta.size();++i){
					try {
						ejecutaComando(respuesta.get(i));
					} catch (JSchException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
		if (requestCode == REQUEST_TEXT4) {
			if (resultCode == Activity.RESULT_OK) {
				Bundle bundle = data.getExtras();
				ArrayList<String> respuesta = bundle.getStringArrayList("comandos");
				for(int i =0;i<respuesta.size();++i){
					try {
						ejecutaComando(respuesta.get(i));
					} catch (JSchException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
	}

	private void borrar() {
		result.setText("");
		
	}

	private void añadirUltimo() {
		if(comandos.size()>=1){
		
		//mostramos el dialogo
		showDialog(DIALOG_TEXT_ENTRY);
		
		
		}else{
			Toast.makeText(this, "no se ha ejecutado ningún comando", Toast.LENGTH_SHORT).show();
		}
		
	}

	private void reconectar() {
		try {
			if(!session.isConnected()){
			Log.i("mssh", "intentando la reconexion");
			session.connect();
			Log.i("mssh", "reconexion correcta");
			}else{
				Toast.makeText(this, "Ya estás conectado", Toast.LENGTH_SHORT).show();
			}
		} catch (JSchException e) {
			Log.i("mssh", "fallo al realizar la reconexion");
			Toast.makeText(this, "No se pudo reconectar", Toast.LENGTH_SHORT).show();
			e.printStackTrace();
		}
		
	}

	private void añadirVarios() {
		if(comandos.size()>=1){
		Intent i = new Intent(this, ComandosEjecutados.class);
		i.putExtra("com", comandos);
		Consola.this.startActivityForResult(i, REQUEST_TEXT4);
		}else{
			Toast.makeText(this, "no se ha ejecutado ningún comando", Toast.LENGTH_SHORT).show();
		}
			
		
	}
	
	private class listenerComando implements View.OnClickListener{

		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			
			if(jsch!=null && session != null){
				
				try{
					
					
					ejecutaComando(comando.getText().toString());
//			        
			   
				}catch (JSchException e) {
					// TODO: handle exception
				}catch (IOException e) {
					// TODO: handle exception
				}
					
				
			}
		}
		
	}
	private void ejecutaComando(String texto) throws JSchException,IOException{
		result.setText(result.getText().toString() + session.getUserName()+"@"+session.getHost()+"  "+ texto + '\n'+'\n');
		result.setTextColor(Color.GREEN); 
		channelExec = (ChannelExec) session.openChannel("exec");
		
		 in = channelExec.getInputStream();
		 //solo se puede ejecutar un comando por session, por eso creamos una session nueva por cada comando.
		comandos.add(texto);
		 channelExec.setCommand(texto);
		channelExec.connect();
	
		
		
		Log.i("mssh", "creamos el reader");
		BufferedReader reader = new BufferedReader(new InputStreamReader(in));
	        String linea = null;			 
	        while ((linea = reader.readLine()) != null) {
	        	
	        	result.setText(result.getText().toString() + linea +'\n');
	        
	        }
	        result.setText(result.getText().toString() + '\n'+'\n');
	        
	   
		//ir al final del editText
	    
	        
	}
}


