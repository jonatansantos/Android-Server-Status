package ubu.inf.control.logica;

import java.util.ArrayList;
import java.util.Calendar;

import ubu.inf.control.R;
import ubu.inf.control.accesodatos.FachadaEmail;
import ubu.inf.control.modelo.Servidor;
import ubu.inf.control.modelo.SingletonEmail;
import ubu.inf.control.modelo.SingletonServicios;



import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.ActivityManager.RunningServiceInfo;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.provider.Settings.Secure;

import android.util.Log;
import android.view.ContextMenu;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.ContextMenu.ContextMenuInfo;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ToggleButton;

/**
 * Clase que implementa la funcionalidad de la pestana de emails.
 * 
 * @author David Herrero
 * @author Jonatan Santos
 * 
 * @version 1.0
 * 
 */
public class PestanaMainEmail extends Activity {
	
	private static final int REQUEST_FORMULARIO = 0;
	private static final int REQUEST_CONTEXT = 1;
	private int idaux;
	private ArrayList<Servidor> datos;

	private ToggleButton run;
	private ListView list;
	private ImageButton add;
	private TextView cantidad;
	private FachadaEmail fachada;

	private ArrayAdapterEmail adapter;

	private Boolean estabaactivo;

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.pestanamainfav);
		inicializa();
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub guardar el estado de los botones?
		super.onPause();
		Log.i("control", "onPause Email");
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		Log.i("control", "onResume Email");

	}

	/**
	 * Función para obtener la referencia a todos los componentes y añadir los
	 * datos iniciales.
	 */
	private void inicializa() {
		// obtenemos la fachada.
		fachada = FachadaEmail.getInstance(this);
		// creamos el array.
		datos = new ArrayList<Servidor>();
		datos = fachada.loadServidores();
		// obtenemos referencias a los componentes.
		cantidad = (TextView) findViewById(R.id.tv_pestanamainfav_contador);
		list = (ListView) findViewById(R.id.lv_main_fav_servidores);
		add = (ImageButton) findViewById(R.id.ib_main_fav_add);
		run = (ToggleButton) findViewById(R.id.tb_pestanamainfav_run);
		// añadimos los listener.
		run.setOnCheckedChangeListener(new ListenerRun());
		add.setOnClickListener(new ListenerAdd());
		list.setOnItemClickListener(new ListenerListView());
		// registramos el ListView para que aparezca un ContextMenu.
		registerForContextMenu(list);
		// ponemos el adapter al ListView
		adapter = new ArrayAdapterEmail(this, datos);
		list.setAdapter(adapter);
		// miramos si el servicio Email está corriendo.
		if (isMyServiceRunning()) {
			run.setChecked(true);
		}
		// actualizmamos el textview.
		cantidad.setText("servicios :"
				+ SingletonEmail.getConexion().getHosts().size());

	}

	/**
	 * Listener del boton para arrancar el seervicio.
	 * 
	 * @author David Herrero de la Peña
	 * @author Jonatan Santos Barrios
	 * 
	 */
	private class ListenerRun implements OnCheckedChangeListener {

		@Override
		public void onCheckedChanged(CompoundButton boton, boolean estado) {
			if (estado && !isMyServiceRunning()) {// encendemos

				Intent myIntent = new Intent(PestanaMainEmail.this,
						ServicioEmail.class);
				startService(myIntent);

				Toast.makeText(PestanaMainEmail.this, "Alarma iniciada",
						Toast.LENGTH_SHORT).show();
				cantidad.setText("servicios :"
						+ SingletonEmail.getConexion().getHosts().size());
				// TODO
				// compruebaActivados();
			} else if (!estado && isMyServiceRunning()) {// apagamos

				Intent myIntent = new Intent(PestanaMainEmail.this,
						ServicioEmail.class);
				stopService(myIntent);

				Log.i("control", "cancelamos la alarma");

				Toast.makeText(PestanaMainEmail.this, "Alarma detenida",
						Toast.LENGTH_SHORT).show();
			}

		}

	}

	/**
	 * Función para eliminar todos los datos de la base de datos.
	 */
	private void limpiar() {
		fachada.borraTabla();
		datos.clear();
		adapter.notifyDataSetChanged();

	}

	/**
	 * Función para editar uno de los Servidores.
	 * 
	 * @param info
	 */
	private void editar(AdapterContextMenuInfo info) {

		Intent i = new Intent(PestanaMainEmail.this, Formulario.class);

		i.putExtra("host", datos.get(info.position).getIp());
		i.putExtra("desc", datos.get(info.position).getDescripcion());
		i.putExtra("inicio", datos.get(info.position).isInicio());
		i.putExtra("color", datos.get(info.position).getColor());
		i.putExtra("puerto", datos.get(info.position).getPuerto());
		idaux = datos.get(info.position).getId();
		// quitamos del Singleton , por si luego cambia
		estabaactivo = SingletonEmail.getConexion().getHosts()
				.remove(datos.get(info.position));

		PestanaMainEmail.this.startActivityForResult(i, REQUEST_CONTEXT);

	}

	/**
	 * Función para borrar un Servidor de la lista y de la BD.
	 * 
	 * @param info
	 */
	private void borrar(AdapterContextMenuInfo info) {

		fachada.deleteServidor(datos, datos.get(info.position).getId());
		SingletonEmail.getConexion().getHosts()
				.remove(datos.get(info.position));

		adapter.notifyDataSetChanged();
		cantidad.setText("servicios :"
				+ SingletonServicios.getConexion().getHosts().size());
	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);

		MenuInflater inflater = getMenuInflater();

		menu.setHeaderTitle("Opciones");

		inflater.inflate(R.menu.menu_fav, menu);

	}

	@Override
	public boolean onContextItemSelected(MenuItem item) {

		AdapterContextMenuInfo info = (AdapterContextMenuInfo) item
				.getMenuInfo();

		switch (item.getItemId()) {
		case R.id.CtxLstFavBorrar:

			borrar(info);

			return true;
		case R.id.CtxLstFavEdit:

			editar(info);

			return true;
		default:
			return super.onContextItemSelected(item);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.menufav, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.clear:
			limpiar();
			break;
		case R.id.ajustes_fav:
			preferencias();
			break;

		default:
			break;
		}

		return true;
	}

	/**
	 * Función para añadir un servidor al Singleton para que el Servicio lo
	 * utilice.
	 * 
	 * @param s
	 *            servidor que queremos añadir.
	 */
	private void iniciaServicio(Servidor s) {

		if (!SingletonEmail.getConexion().getHosts().contains(s)) {

			SingletonEmail.getConexion().getHosts().add(s);
			cantidad.setText("servicios :"
					+ SingletonEmail.getConexion().getHosts().size());
		}

	}

	/**
	 * Función para eliminar un servidor al Singleton para que el Servicio no lo
	 * utilice.
	 * 
	 * @param s
	 *            servidor que queremos eliminar.
	 */
	private void paraServicio(Servidor s) {

		SingletonEmail.getConexion().getHosts().remove(s);
		cantidad.setText("servicios :"
				+ SingletonEmail.getConexion().getHosts().size());

	}

	/**
	 * Función para saber si el ServicioEmail está funcionando.
	 * 
	 * @return true si está funcionando, false si no lo está haciendo.
	 */
	private boolean isMyServiceRunning() {
		ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
		for (RunningServiceInfo service : manager
				.getRunningServices(Integer.MAX_VALUE)) {
			if ("ubu.inf.control.logica.ServicioEmail".equals(service.service
					.getClassName())) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Función que llama a la ventana para establecer las preferencias de la
	 * aplicación.
	 */
	private void preferencias() {
		Intent i = new Intent(this, Preferencias.class);
		startActivity(i);
	}

	/**
	 * Función para tratar los datos que se obtienen tras crear una
	 * ActivityForResult.
	 */
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == REQUEST_FORMULARIO) {
			if (resultCode == Activity.RESULT_OK) {

				Bundle bundle = data.getExtras();
				Servidor serv = new Servidor(bundle.getString("host"),
						bundle.getString("desc"), bundle.getBoolean("inicio"),
						0, bundle.getInt("color"),Integer.parseInt(bundle.getString("puerto")));
				fachada.insertServidor(datos, serv);

				adapter.notifyDataSetChanged();
			}
		} else {
			if (requestCode == REQUEST_CONTEXT) {
				if (resultCode == Activity.RESULT_OK) {

					Log.i("control", "estamos en editar");
					Bundle bundle = data.getExtras();
					Servidor serv = new Servidor(bundle.getString("host"),
							bundle.getString("desc"),
							bundle.getBoolean("inicio"), idaux,
							bundle.getInt("color"),bundle.getInt("puerto"));
					// Log.i("control", "nuevo nombre =" + serv.getIp());

					fachada.editServidor(datos, serv);

					// insertamos de Singleton la IP
					if (estabaactivo) {
						SingletonEmail.getConexion().getHosts().add(serv);
						estabaactivo = false;
					}

					adapter.notifyDataSetChanged();
				}
			}
		}
	}

	/**
	 * Listener del boton de añadir.
	 * 
	 * @author David Herrero de la Peña
	 * @author Jonatan Santos Barrios
	 * 
	 */
	private class ListenerAdd implements View.OnClickListener {

		public void onClick(View arg0) {
			Intent i = new Intent(PestanaMainEmail.this, Formulario.class);
			PestanaMainEmail.this.startActivityForResult(i, REQUEST_FORMULARIO);

		}

	}

	/**
	 * Listener de la lista.
	 * 
	 * @author David Herrero de la Peña
	 * @author Jonatan Santos Barrios
	 * 
	 */
	private class ListenerListView implements OnItemClickListener {

		public void onItemClick(AdapterView<?> a, View v, int position, long id) {

			// TODO Por ahora no hace nada, se le podría añadir funcionalidad.

		}
	}

	/**
	 * Adapter para la ListView.
	 * 
	 * @author David Herrero de la Peña
	 * @author Jonatan Santos Barrios
	 * 
	 * @see ArrayAdapter
	 * 
	 */
	private class ArrayAdapterEmail extends ArrayAdapter<Servidor> {
		private Activity context;
		private ArrayList<Servidor> datos;

		public ArrayAdapterEmail(Activity context, ArrayList<Servidor> array) {
			super(context, R.layout.list_servers, array);

			this.context = context;
			datos = array;
		}

		@Override
		public View getView(final int position, View convertView,
				ViewGroup parent) {

			LayoutInflater inflater = context.getLayoutInflater();
			View item = inflater.inflate(R.layout.list_servers, null);

			TextView ID = (TextView) item.findViewById(R.id.tv_listservers_id);
			Integer id = datos.get(position).getId();
			ID.setText(id.toString());
			ID.setBackgroundColor(datos.get(position).getColor());

			TextView ip = (TextView) item.findViewById(R.id.tv_listservers_ip2);
			ip.setText(datos.get(position).getIp()+":"+datos.get(position).getPuerto());
			TextView desc = (TextView) item
					.findViewById(R.id.tv_listservers_desc2);

			desc.setText(datos.get(position).getDescripcion());

			TextView estado = (TextView) item
					.findViewById(R.id.tv_listservers_estado);

			ToggleButton boton = (ToggleButton) item
					.findViewById(R.id.tb_listservers_servicio);
			boton.setBackgroundResource(R.drawable.tb_icon);

			ID.setBackgroundColor(datos.get(position).getColor());

			// ponemos el listener al ToggleButon
			boton.setOnCheckedChangeListener(new OnCheckedChangeListener() {

				@Override
				public void onCheckedChanged(CompoundButton boton1,
						boolean activado) {
					if (activado) {
						iniciaServicio(datos.get(position));
					} else {
						paraServicio(datos.get(position));
					}

				}
			});

			// para poner los botones en on si es necesario
			if (SingletonEmail.getConexion().getHosts()
					.contains(datos.get(position))) {
				Log.i("control", datos.get(position).getIp()
						+ " ya estaba ejecutandose, ponemos botón a ok");
				boton.setChecked(true);
			}

			if (datos.get(position).isInicio()) {
				estado.setTextColor(Color.GREEN);
				estado.setText("autoarranque SI");

			} else {
				estado.setTextColor(Color.RED);
				estado.setText("autoarranque NO");

			}
			return (item);

		}

	}

}
